#pragma once
#include <cli/char_sequence.h>
#include <cli/parameter_sequence.h>
#include <cli/types.h>
#include <algorithm>
#include <stdint.h>


namespace cli
{


template<class COLL_TYPE = uint8_t, class ROW_TYPE = uint8_t>
struct VT102
{
	enum class Attribute : uint8_t
	{
		Reset      = 0,
		Bright     = 1,
		Dim        = 2,
		Underscore = 4,
		Blink      = 5,
		Reverse    = 7,
		Hidden     = 8
	};

	enum class Foreground : uint8_t
	{
		Black   = 30,
		Red     = 31,
		Green   = 32,
		Yellow  = 33,
		Blue    = 34,
		Magenta = 35,
		Cyan    = 36,
		White   = 37
	};

	enum class Background : uint8_t
	{
		Black   = 40,
		Red     = 41,
		Green   = 42,
		Yellow  = 43,
		Blue    = 44,
		Magenta = 45,
		Cyan    = 46,
		White   = 47
	};

	using ColDistance_t = ColDistance<COLL_TYPE>;
	using RowDistance_t = RowDistance<ROW_TYPE>;
	using Col_t = Collumn<COLL_TYPE>;
	using Row_t = Row<ROW_TYPE>;

	static constexpr char Esc = '\033';
	using pss = CharSequence<Esc, '['>;

	using QueryDeviceCode          = CharSequence<Esc, '[', 'c'>;
	using QueryDeviceStatus        = CharSequence<Esc, '[', '5', 'n'>;
	using QueryCursorPosition      = CharSequence<Esc, '[', '6', 'n'>;

	using Reset                    = CharSequence<Esc, 'c'>;
	using EnableLineWrap           = CharSequence<Esc, '[', '7', 'h'>;
	using DisableLineWrap          = CharSequence<Esc, '[', '7', 'l'>;

	using SetFontG0                = CharSequence<Esc, '('>;
	using SetFontG1                = CharSequence<Esc, ')'>;

	using HomeCursor               = ParameterSequence<'H', pss>;
	using SetCursorPosition        = ParameterSequence<'H', pss, Row_t, Col_t>;
	using ForceCursorPosition      = ParameterSequence<'f', pss, Row_t, Col_t>;
	using CursorUp                 = ParameterSequence<'A', pss, RowDistance_t>;
	using CursorDown               = ParameterSequence<'B', pss, RowDistance_t>;
	using CursorForward            = ParameterSequence<'C', pss, ColDistance_t>;
	using CursorBackward           = ParameterSequence<'D', pss, ColDistance_t>;

	using SaveCursorPosition       = CharSequence<Esc, '[', 's'>;
	using ResoreCursorPosition     = CharSequence<Esc, '[', 'u'>;
	using SaveCursorPositionAttr   = CharSequence<Esc, '7'>;
	using ResoreCursorPositionAttr = CharSequence<Esc, '8'>;

	using EnableScrolling          = CharSequence<Esc, '[', 'r'>;
	using EnablePartialScrolling   = ParameterSequence<'r', pss, Col_t, Col_t>;
	using ScrollDown               = CharSequence<Esc, 'D'>;
	using ScrollUp                 = CharSequence<Esc, 'M'>;

	using SetTab                   = CharSequence<Esc, 'H'>;
	using ClearTab                 = CharSequence<Esc, '[', 'g'>;
	using ClearAllTab              = CharSequence<Esc, '[', '3', 'g'>;

	using EraseToEndOfLine         = CharSequence<Esc, '[', 'K'>;
	using EraseToStartOfLine       = CharSequence<Esc, '[', '1', 'K'>;
	using EraseLine                = CharSequence<Esc, '[', '2', 'K'>;
	using EraseDown                = CharSequence<Esc, '[', 'J'>;
	using EraseUp                  = CharSequence<Esc, '[', '1', 'J'>;
	using EraseScreen              = CharSequence<Esc, '[', '2', 'J'>;

	template<class ... ATTRIBUTES>
	using SetAttribure             = ParameterSequence<'m', pss, ATTRIBUTES...>;
};




// Report Device Code	<ESC>[{code}0c

//     Generated by the device in response to Query Device Code request.

// Report Device OK	<ESC>[0n

//     Generated by the device in response to a Query Device Status request; indicates that device is functioning correctly.

// Report Device Failure	<ESC>[3n

//     Generated by the device in response to a Query Device Status request; indicates that device is functioning improperly.

// Report Cursor Position	<ESC>[{ROW};{COLUMN}R

//     Generated by the device in response to a Query Cursor Position request; reports current cursor position.



} //namespace cli
